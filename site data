import pandas as pd
import os
import numpy as np
import datetime
import matplotlib.pyplot as plt


def process(csv_dir):
    ans = {}

    csvs = os.listdir(csv_dir)

    if '.DS_Store' in csvs:
        csvs.remove('.DS_Store')

    targets = ['PM2.5']

    for csv in csvs:
        tmp = {}
        if 'extra' in csv:
            continue
        csv_path = os.path.join(csv_dir, csv)
        data = pd.read_csv(csv_path, sep=',', encoding='utf-8')
        locations = [loc for loc in data][3:]
        for location in locations:
            if location not in ans:
                ans[location] = {'PM2.5': np.zeros(365)}
            if location not in tmp:
                tmp[location] = {'PM2.5': []}
        for row in data.iterrows():
            row = row[1]
            if row['type'] not in targets:
                continue
            for location in locations:
                d = row[location]
                if not np.isnan(d):
                    tmp[location][row['type']].append(d)
        date_index = datetime.datetime.strptime(str(data['date'][0]), "%Y%m%d").timetuple().tm_yday - 1
        for location in locations:
            for target in targets:
                if len(tmp[location][target]) == 0:
                    ans[location][target][date_index] = 0
                else:
                    ans[location][target][date_index] = np.mean(tmp[location][target])
    return ans


def process_plus(csv_dir, save_path='./'):
    '''compute mean value and then merge them
    args:
        csv_dir: dir where *.csv saved
        save_path: dir where to save new_csv
    '''

    # read all csv list
    csvs = os.listdir(csv_dir)

    # this only happen when you use Linux(?)/MacOS
    if '.DS_Store' in csvs:
        csvs.remove('.DS_Store')

    # which attributions to process
    targets = ['PM2.5']

    # save ans
    ans = {'PM2.5': {}}

    for csv in csvs:

        # only care 'all' not 'extra'
        if 'extra' in csv:
            continue

        # load data
        csv_path = os.path.join(csv_dir, csv)
        data = pd.read_csv(csv_path, sep=',', encoding='utf-8')

        # get locations
        locations = [loc for loc in data][3:]

        # dict to save data of one day
        tmp = {}

        # make sure the key exists
        for location in locations:
            # in one day's data
            if location not in tmp:
                tmp[location] = {'PM2.5': []}
            # in final ans's data
            for target in targets:
                if location not in ans[target]:
                    ans[target][location] = {}

        # process row by row
        for row in data.iterrows():
            row = row[1]  # becasue row is a tuple which contains index and data: [index, object]
            if row['type'] not in targets:  # only care part
                continue

            # process by place in one row
            for location in locations:
                d = row[location]
                if not np.isnan(d):  # if the data is loss, don't consider it
                    tmp[location][row['type']].append(d)
        date = data['date'][0]  # get the date, which is str

        # to compute mean data of one day
        for location in locations:
            for target in targets:
                if len(tmp[location][target]) == 0:  # if data in one day is all lost
                    ans[target][location][date] = np.nan
                else:
                    ans[target][location][date] = np.mean(tmp[location][target])

    # save by attribution which you care about
    for target in targets:
        csv_data = pd.DataFrame(ans[target])
        csv_data.sort_index(axis=0, inplace=True)
        csv_data.to_csv(os.path.join(save_path, target + '.csv'))
        print("{} Done!".format(target))


# def test():
#     csv_dir = '/PM2.5data_day_20140513-20141231/'
#     ans = process(csv_dir)
#     plt.plot(ans['haidian']['PM2.5'])
#     plt.show()


def test_plus():
    csv_dir = 'PM2.5data_CSV'
    save_path = 'PM2.5data_Day'
    process_plus(csv_dir, save_path)


if __name__ == '__main__':
    test_plus()
